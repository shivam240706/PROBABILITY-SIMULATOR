Project Report: Probability Simulator 


Table of Contents


1. Overview
2. Project Objectives
3. Functional Structure and Design Rationale 
4. Execution Workflow 
5. Technical Specifications
6. Mathematical Models Utilized 
7. Statistical Computation Methods 
8. Educational Applications 
9. Future Enhancements
10. Conclusion
11. Appendix



Overview


The Probability Simulator is a modular, terminal-based application developed in the C programming language. Its primary objective is to serve as an interactive platform for exploringey principles in probability and statistics through simulated experiments. Designed especially for students majoring in mathematics, computer science, or engineering, the simulator provides a hands-on approach to understanding discrete probability distributions, statistical computations, and stochastic modeling.
Users can conduct randomized simulations of coin tosses, card draws, dice rolls, and roulette spins, while also computing fundamental statistical metrics such as mean, variance, and standard deviation. The application utilizes only standard C libraries (<stdio.h>, <stdlib.h>, <math.h>, <time.h>), ensuring platform compatibility and execution efficiency.
Unlike theoretical coursework, this tool introduces the dimension of computational experimentation, enabling users to manipulate variables and observe real-time outputs of probabilistic models. It empowers students to build intuition about random processes through simulated experiments, reinforcing the connection between theory and application







Project Objectives


This simulator was created with the following goals in mind:
- Provide an interactive framework for simulating classical probability experiments.
- Allow users to examine outcomes through both empirical and theoretical lenses.
- Support calculations for various discrete distributions such as binomial, geometric, uniform, and Poisson.
- Enable basic statistical analysis on custom user-input datasets.
- Illustrate the implementation of mathematical models using core C programming constructs.
- Encourage algorithmic thinking and reinforce numerical problem-solving skills.
-Foster critical thinking through custom experiments and interpretation of data.
-Promote familiarity with software-based tools for statistical simulations.
-Build foundational programming experience relevant to scientific computing and data analysis.


Functional Structure and Design Rationale
The simulator is structured around modular function definitions to enhance readability, modularity, and maintainability. Each function encapsulates a distinct probabilistic model or utility, allowing flexible experimentation and targeted instruction.
Below is a detailed breakdown of each function, its purpose, example output, and the corresponding pseudocode for conceptual clarity.
main()
Purpose: Acts as the central controller that initializes the application, presents a user interface, and routes execution to the appropriate modules.
Pseudocode:
Start main
  Seed random number generator
  Loop:
    Display menu
    Get user choice
    Call selected function
    If exit is chosen, confirm and exit
End main


getInt(const char *prompt, int min, int max)

Validates numeric input from the user within a specified range. This function is used across nearly all other functions that require controlled input.
Purpose: Utility function to validate and restrict integer input to a specific range. Ensures robustness against invalid user entries.
Pseudocode:

Loop:
  Print prompt
  If input is integer within range, return it
  Else print error and repeat

factorial(int n)

Calculates the factorial of a non-negative integer iteratively. This is critical for computing binomial coefficients and Poisson probabilities.
Purpose: Calculates the factorial using iteration. Supports statistical functions like binomial and Poisson distributions.
Pseudocode:
If n < 0 return -1
Set result = 1
For i from 1 to n:
  result *= i
Return result
Example Output:
Factorial of 5 is 120


coinProbability()

Simulates a coin-toss experiment using a binomial distribution where each trial has a success probability of 0.5. It determines the likelihood of achieving a specified number of heads.
Purpose: Estimates the likelihood of getting a specified number of heads in a given number of coin tosses using the binomial distribution.

Pseudocode:

Prompt user for number of tosses and heads
Calculate binomial probability with p = 0.5
Print result
Example Output:
Probability of 3 heads in 5 tosses: 0.312500

dieProbability()

Performs a frequency analysis of outcomes from simulated dice rolls. It uses pseudo-random number generation to tally the occurrence of each face from 1 to 6.
Purpose: Simulates rolling a die multiple times and counts the occurrence of each face.
Pseudocode:
Prompt user for number of rolls
Initialize frequency array for 6 faces
For each roll:
  Generate random number 1-6
  Increment corresponding frequency
Print frequencies
Example Output:
Face  Frequency
1     3
2     2
3     5
4     4
5     3
6     3




cardProbability()

Calculates the binomial probability of drawing a specific number of target cards (e.g., Aces) from a subset of draws out of a 52-card deck.
Purpose: Computes the probability of drawing a given number of specific cards (e.g., Aces) using the binomial formula.
Pseudocode:
Prompt for total draws and specific card count
Calculate binomial probability using p = 4/52
Print result
Example Output:
Probability of drawing 2 Aces in 5 draws: 0.045883

poissonDistribution()

Implements the Poisson distribution model to estimate the probability of a certain number of discrete occurrences given a known average event rate.
Purpose: Models rare event frequency using the Poisson distribution.

Pseudocode:
Prompt user for lambda and k
Calculate probability using formula
Print result
Example Output:
Poisson Probability (λ=2.5, k=3): 0.213763

rouletteSimulation()

Models the results of multiple roulette spins. Each outcome is classified into red, black, or white (zero), and their frequencies are computed.
Purpose: Simulates a roulette game and records the outcomes: red, black, and white (zero).
Pseudocode:
Prompt for number of spins
For each spin:
  Generate number 0–36
  Classify as red, black, or white
Print frequency of each
Example Output:
Red: 8
Black: 9
White: 3
calculateStatistics()

Prompts the user for a set of data points, stores them dynamically in memory, and computes the dataset's mean, variance, and standard deviation. Uses malloc and free for memory handling.
Purpose: Collects a dataset from the user and computes mean, variance, and standard deviation.
Pseudocode:
Prompt for number of data points

Allocate memory
Loop to read values and calculate sum
Compute mean
Loop to calculate variance
Compute std deviation
Print results
Free memory
Example Output:
Mean: 12.50
Variance: 6.25
Std Dev: 2.50

binomial(int n, int k, double p)

Calculates the binomial probability of observing k successes in n trials with success probability p. Utilizes the factorial function to compute combinations.
Purpose: Computes probability using the binomial distribution.
Pseudocode:
Calculate n!, k!, (n-k)!
Return (n! / (k!(n-k)!)) * p^k * (1-p)^(n-k)

geometric(int k, double p)

Computes the probability of the first success occurring on the k-th trial using the geometric distribution formula.
Purpose: Calculates the probability that the first success occurs on the k-th trial.
Pseudocode:
Return (1 - p)^(k-1) * p

uniform(int a, int b)

Returns the probability of any discrete outcome within the inclusive range [a, b] under a uniform distribution.
Purpose: Returns the probability of any discrete value in the range [a, b].
Pseudocode:
If a <= b:
  Return 1 / (b - a + 1)
else return 0


Execution Workflow

1. Initialization: The program seeds the random number generator using the current time.
2. User Menu: Displays a main menu with selectable simulation and analysis options.
3. Input Validation: Ensures valid and bounded user input.
4. Simulation Execution: Delegates function calls based on user selection.
5. Result Display: Outputs computed or simulated data to the console.


Technical Specifications

Specification	Details
Language	C (ANSI C99 Standard)
Compiler	GCC (GNU Compiler Collection)
OS Compatibility	Cross-platform (Linux, Windows, Mac)
External Libraries	None (only standard C libraries)
Randomness Source	rand() seeded by time(0)


Mathematical Models Utilized

Each function aligns with fundamental statistical models. Here are the key distributions employed:

Binomial Distribution

P(k; n, p) = C(n, k) * p^k * (1 - p)^(n - k)
Used in both coinProbability() and cardProbability() to model the number of successful outcomes in repeated binary experiments.

Poisson Distribution

P(k; λ) = (λ^k * e^(-λ)) / k!
Applied in poissonDistribution() to model the frequency of rare events over fixed intervals.

Geometric Distribution

P(k; p) = (1 - p)^(k - 1) * p
Implemented in geometric() to compute the probability of first success on the k-th trial.

Uniform Distribution

P(x) = 1 / (b - a + 1)
Utilized in uniform() to represent equal likelihood outcomes across a finite range.


Statistical Computation Methods

In the calculateStatistics() function, the following statistical metrics are computed:
- Mean (μ): μ = (1/n) ∑ xᵢ
- Variance (σ²): σ² = (1/n) ∑ (xᵢ - μ)²
- Standard Deviation (σ): σ = √σ²

These computations provide users with quantitative insights into the central tendency and variability of datasets.

Educational Applications

The Probability Simulator is a powerful instructional tool for:
- Reinforcing coursework on probability and statistical theory.
- Demonstrating real-world applications of discrete distributions.
- Teaching programming constructs such as loops, conditionals, functions, and memory management.
- Allowing self-guided experimentation and probabilistic hypothesis testing.

Future Enhancements

Potential directions for extending the project include:
- Addition of continuous probability distributions (e.g., Normal, Exponential).
- Visualization capabilities using simple graphics libraries or ASCII charts.
- Exporting results to external formats such as CSV or JSON.
- Modularization into separate source/header files for better code management.
- Integration of a GUI or web-based frontend for enhanced user experience.


Conclusion
The Probability Simulator is a versatile and extensible program that integrates computational logic with foundational probability theory. By simulating classical probability experiments and enabling statistical computation, it acts as both a learning platform and a practical demonstration of C programming applied to real-world problem-solving. Its structured, modular design ensures clarity, while its adaptability paves the way for further development and educational use.
This project demonstrates the synthesis of programming, mathematics, and data analysis in an accessible format. It holds potential as a foundational tool for more advanced probabilistic simulations, contributing to both academic instruction and self-paced exploration.






Appendix

- Programming Language: C (C99 standard)
- Standard Libraries: <stdio.h>, <stdlib.h>, <math.h>, <time.h>
- Compiler: GCC or compatible
- Platform: Cross-platform terminal-based interface
- Interaction Style: Menu-driven command-line application
- Output: Console text results
-Keywords: Probability, C Programming, Simulation, Statistics, Education
